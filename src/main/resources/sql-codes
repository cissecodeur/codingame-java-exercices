
====================================================================================================== SQL EXERCICES ================================================================================================


Objectif :
Certains pièces de véhicules ( vehicle_part ) n'ont pas la même marque ( make ), modèle ( model ) ou année ( year ) que le véhicule correspondant.
Cette inexactitude est rendue possible par l'absence de clé étrangère entre les table vehicle et vehicle_part sur le triplet make,model,year .
Extraire les pièces qui sont dans ce cas de figure (non correspondance des marque, modèle ou année). Conditions
Colonnes attendues : vin , rfid , part_name dans cet ordre.


Réponse:
SELECT VIN,RFID,PART_NAME
FROM   PART_VEHICLE
WHERE  (make,model,year) NOT IN ( SELECT make,model,year FROM   VEHICLE)

----------------------------------------------------------------------------------------------------------------

Objectif :
Extraire les véhicules ( vehicle ) n'ayant aucune pièce ( vehicle_part ) associée.
Conditions
Colonne attendue : vehicle_id .
vehicle_part a un champ vehicle_id et vehicle a pour cle primaire vehicle_id
Ecris une requete sql


SELECT v.vehicle_id
FROM vehicle v
LEFT JOIN vehicle_part vp ON v.vehicle_id = vp.vehicle_id
WHERE vp.vehicle_id IS NULL;

--------------------------------------------------------------------------------------------------------------

Objectif:
Extraire les joueurs ayant obtenu un total de 1600 points ou plus. Notez que le total de points d'un
joueur est égal aux jeux joués ( games_played ) multipliés par ppg , arrondi au nombre entier le plus
proche.   Conditions
Colonnes attendues : first_name , last_name , total , dans cet ordre. Trier les lignes par
last_name , dans l'ordre alphabétique.  Exemple :
-----------------------------------
| FIRST_NAME | LAST_NAME | TOTAL |
-----------------------------------
| DeMarcus | Cousins | 1749 |
| Stephen | Curry | 2378 |
| Andrew | Wiggins | 1677 |


Réponse:

SELECT first_name, last_name, ROUND(games_played * ppg) AS total
FROM players
WHERE ROUND(games_played * ppg) >= 1600
ORDER BY last_name ASC;


---------------------------------------------------------------------------------------------------------------

Objectif :
Extraire les emplacements de pièces de véhicule ( vehicle_part_location ) pour lesquels
location_id est égal à 3, 6, ou 12 et ayant une date de sortie ( left_timestamp ) définie. Conditions
Colonnes attendues : vehicle_part_id , arrived_timestamp , dans cet ordre. Exemple :
-------------------------------------------------
| VEHICLE_PART_ID | ARRIVED_TIMESTAMP           |
-------------------------------------------------
          | 4
| 6
| 7
-------------------------------------------------


Réponse:
SELECT vehicle_part_id , arrived_timestamp
FROM vehicle_part_location
WHERE location_id IN (3,6,12)
AND arrived_timestamp IS NOT NULL;

---------------------------------------------------------------------------------------------------------------

Objectif :
Rédigez une requête qui renvoie les employés qui sont dans l'entreprise depuis au moins 5 ans (
num_years supérieur ou égal à 5) et qui ont un niveau de satisfaction d'au moins 0,8 ( satisfaction supérieur ou égal à 0,8). Conditions
Colonnes attendues : first_name , last_name , satisfaction , dans cet ordre. Trier les lignes par
last_name , dans l'ordre alphabétique. Exemple :
-------------------------------------------
| FIRST_NAME  | LAST_NAME  | SATISFACTION |
-------------------------------------------
              | Kent
| Tony
| James
-------------------------------------------

Réponse:
SELECT first_name , last_name , satisfaction
FROM employee
WHERE num_years >= 5
AND satisfaction >= 0.8
ORDER BY last_name;


---------------------------------------------------------------------------------------------------------------
Objectif:

Modifier la requête pour sélectionner uniquement le (ou les) produit(s) (product) ayant la plus grande quantité disponible (available_stock).
N'afficher que les colonnes PRODUCT_ID, NAME et AVAILABLE_STOCK dans cet ordre. Exemple de sortie :
----------------------------------------------------
| PRODUCT_ID | NAME              | AVAILABLE_STOCK |
----------------------------------------------------
| 11         | X608GT - ALLSTAR  | 8765            |
| 15         | L6095T            | 8765            |
----------------------------------------------------


Reponse:
-- SQL request(s) below
 SELECT product.PRODUCT_ID , product.NAME, product.AVAILABLE_STOCK
  FROM product
  ORDER BY product.AVAILABLE_STOCK DESC LIMIT 2


---------------------------------------------------------------------------------------------------------------

  Objectif
  Rédigez une requête qui renvoie tous les étudiants dont la note moyenne aux tests de sciences humaines ( avg_score ) est supérieure ou égale à 0,9. Un test de sciences humaines a un test_name égal à 'English Test' ou 'History Test'. Conditions
  Colonnes attendues : first_name , last_name , avg_score , dans cet ordre. Arrondissez le score moyen pour ne conserver que deux décimales. Trier les lignes par score moyen (non arrondi), dans l'ordre décroissant. Exemple :
  --------------------------------------
  | FIRST_NAME | LAST_NAME | AVG_SCORE |
  --------------------------------------
              | Joann
  | Teddy
  | Rebecca
  --------------------------------------

  Reponse:
  SELECT
      first_name,
      last_name,
      ROUND(avg_score, 2) AS avg_score
  FROM
      students
  WHERE
      test_name IN ('English Test', 'History Test')
  GROUP BY
      first_name, last_name, avg_score
  HAVING
      AVG(avg_score) >= 0.9
  ORDER BY
      AVG(avg_score) DESC;



---------------------------------------------------------------------------------------------------------------

Rédigez une requête qui renvoie les meilleurs joueurs de basketball. Nous définissons les meilleurs joueurs de basketball comme les personnes dont le ppg est supérieur ou égal à 20,0, le rpg et le apg sont tout deux supérieurs ou égaux à 5,0, et le games_played supérieur ou égal à 65. Conditions Colonnes attendues : first_name , last_name , dans cet ordre.
Trier les lignes par last_name puis par first_name dans l'ordre alphabétique. Exemple :

---------------------------
| FIRST_NAME | LAST_NAME  |
---------------------------
| James
| LeBron
| Russell
---------------------------

Reponse:
SELECT
    first_name,
    last_name
FROM
    basketball_players
WHERE
    ppg >= 20.0
    AND rpg >= 5.0
    AND apg >= 5.0
    AND games_played >= 65
ORDER BY
    last_name, first_name;




---------------------------------------------------------------------------------------------------------------

Objectif
Pour chaque employé, renvoyer un code contenant les éléments suivants séparés par un - :
La première lettre de first_name ainsi que la première et la dernière lettre de last_name , en majuscules.
satisfaction (en ne gardant que deux chiffres après la virgule). Le caractère "x " si l'ancienneté de l'employé ( num_years ) est supérieure ou égale à 3 ans. Exigences Colonne attendue :
employee_code . Triez les lignes par ordre décroissant de satisfaction . Exemple:
-----------------
| employee_code |
-----------------
| BHS-0.99-x    |
| TAL-0.98      |
| JMY-0.97-x    |
-----------------

reponse:
SELECT
    CONCAT(
        UPPER(SUBSTRING(first_name, 1, 1)),
        UPPER(SUBSTRING(last_name, 1, 1)),
        UPPER(SUBSTRING(last_name, -1, 1)),
        '-',
        ROUND(satisfaction, 2),
        CASE WHEN num_years >= 3 THEN '-x ' ELSE '' END
    ) AS employee_code
FROM
    employees
ORDER BY
    satisfaction DESC;
